{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs \u00b6 For full documentation visit mkdocs.org . Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout \u00b6 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"code/linmodest/","text":"linmodest ( x , y ) \u00b6 Solve simple linear models Take a n by p matrix x and a p x 1 array and compute coefficients, vcov, sigma squared and degrees of freedom for a standard linear model Parameters: Name Type Description Default x np . matrix an n x p matrix where n are the observations and p are the number of predictors required y np . array an n x 1 response vector required Raises: Type Description ValueError raised when number of rows of x do not match number of rows of y Returns: Name Type Description dict dict A dictionary with keys coef (coefficients), dict vcov (variance covariance matrix), Source code in lmdemo/linmodest.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 def linmodest ( x : np . matrix , y : np . array ) -> dict : \"\"\"Solve simple linear models Take a n by p matrix x and a p x 1 array and compute coefficients, vcov, sigma squared and degrees of freedom for a standard linear model Args: x (np.matrix): an n x p matrix where n are the observations and p are the number of predictors y (np.array): an n x 1 response vector Raises: ValueError: raised when number of rows of x do not match number of rows of y Returns: dict: A dictionary with keys coef (coefficients), vcov (variance covariance matrix), \"\"\" # first, check that the dimensions are correct logging . debug ( \"shape of x: %s ; shape of y: %s \" % ( str ( x . shape ), str ( y . shape ))) #pylint: disable=C0209,W1201 if not x . shape [ 0 ] == y . shape [ 0 ]: raise ValueError ( f \"Number of rows in x is { x . shape [ 1 ] } , \" \\ f \"number of rows in y is { y . shape [ 0 ] } . These are not equal. \" f \"They should be.\" ) # compute the coefficients q , r = np . linalg . qr ( x ) coef = np . dot ( np . linalg . inv ( r ), np . dot ( q . T , y )) # get degrees of freedom, rows-columns df = x . shape [ 0 ] - x . shape [ 1 ] # compute sigma squared sigma2 = np . sum (( y - np . matmul ( x , coef )) ** 2 ) / df # compute variance covariance matrix vcov = sigma2 * np . linalg . inv ( np . dot ( r . T , r )) # return a named dict return { k : v for k , v in zip ([ 'coef' , 'vcov' , 'sigma' , 'df' ], [ coef , vcov , np . sqrt ( sigma2 ), df ])}","title":"Linmodest"},{"location":"code/linmodest/#lmdemo.linmodest.linmodest","text":"Solve simple linear models Take a n by p matrix x and a p x 1 array and compute coefficients, vcov, sigma squared and degrees of freedom for a standard linear model Parameters: Name Type Description Default x np . matrix an n x p matrix where n are the observations and p are the number of predictors required y np . array an n x 1 response vector required Raises: Type Description ValueError raised when number of rows of x do not match number of rows of y Returns: Name Type Description dict dict A dictionary with keys coef (coefficients), dict vcov (variance covariance matrix), Source code in lmdemo/linmodest.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 def linmodest ( x : np . matrix , y : np . array ) -> dict : \"\"\"Solve simple linear models Take a n by p matrix x and a p x 1 array and compute coefficients, vcov, sigma squared and degrees of freedom for a standard linear model Args: x (np.matrix): an n x p matrix where n are the observations and p are the number of predictors y (np.array): an n x 1 response vector Raises: ValueError: raised when number of rows of x do not match number of rows of y Returns: dict: A dictionary with keys coef (coefficients), vcov (variance covariance matrix), \"\"\" # first, check that the dimensions are correct logging . debug ( \"shape of x: %s ; shape of y: %s \" % ( str ( x . shape ), str ( y . shape ))) #pylint: disable=C0209,W1201 if not x . shape [ 0 ] == y . shape [ 0 ]: raise ValueError ( f \"Number of rows in x is { x . shape [ 1 ] } , \" \\ f \"number of rows in y is { y . shape [ 0 ] } . These are not equal. \" f \"They should be.\" ) # compute the coefficients q , r = np . linalg . qr ( x ) coef = np . dot ( np . linalg . inv ( r ), np . dot ( q . T , y )) # get degrees of freedom, rows-columns df = x . shape [ 0 ] - x . shape [ 1 ] # compute sigma squared sigma2 = np . sum (( y - np . matmul ( x , coef )) ** 2 ) / df # compute variance covariance matrix vcov = sigma2 * np . linalg . inv ( np . dot ( r . T , r )) # return a named dict return { k : v for k , v in zip ([ 'coef' , 'vcov' , 'sigma' , 'df' ], [ coef , vcov , np . sqrt ( sigma2 ), df ])}","title":"linmodest()"}]}